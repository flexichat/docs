{
    "swagger": "2.0",
    "info": {
      "description": "This is the API documentation for Flexichat server.",
      "version": "1.0.0",
      "title": "Flexichat",
      "termsOfService": "https://www.flexi.cx/terms-of-service/",
      "contact": {
        "email": "hello@flexi.cx"
      },
      "license": {
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT"
      }
    },
    "host": "fchat.flexi.cx",
    "basePath": "/",
    "schemes": [
      "https"
    ],
    "produces": [
      "application/json; charset=utf-8"
    ],
    "consumes": [
      "application/json; charset=utf-8"
    ],
    "securityDefinitions": {
      "userApiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "api_access_token",
        "description": "This token can be obtained by visiting the profile page or via rails console. Provides access to endpoints based on the user permissions levels. This token can be saved by an external system when user is created via API, to perform activities on behalf of the user."
      },
      "agentBotApiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "api_access_token",
        "description": "This token should be provided by system admin or obtained via rails console. This token can be used to build bot integrations and can only access limited apis."
      }
    },
    "security": [
      {
        "userApiKey": []
      }
    ],
    "paths": {
      "/api/v1/accounts/{account_id}/contacts": {
        "get": {
          "tags": [
            "Contacts"
          ],
          "operationId": "contactList",
          "description": "Listing all the resolved contacts with pagination (Page size = 15). Resolved contacts are the ones with a value for identifier, email or phone number",
          "summary": "List Contacts",
          "parameters": [
            {
              "$ref": "#/parameters/account_id"
            },
            {
              "$ref": "#/parameters/contact_sort_param"
            },
            {
              "$ref": "#/parameters/page"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/contact_list"
              }
            },
            "400": {
              "description": "Bad Request Error",
              "schema": {
                "$ref": "#/definitions/bad_request_error"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Contacts"
          ],
          "operationId": "contactCreate",
          "description": "Create a new Contact",
          "summary": "Create Contact",
          "parameters": [
            {
              "$ref": "#/parameters/account_id"
            },
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/contact_create"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/extended_contact"
              }
            },
            "400": {
              "description": "Bad Request Error",
              "schema": {
                "$ref": "#/definitions/bad_request_error"
              }
            }
          }
        }
      },
      "/api/v1/accounts/{account_id}/contacts/{id}": {
        "parameters": [
          {
            "$ref": "#/parameters/account_id"
          },
          {
            "name": "id",
            "in": "path",
            "type": "number",
            "description": "ID of the contact",
            "required": true
          }
        ],
        "get": {
          "tags": [
            "Contacts"
          ],
          "operationId": "contactDetails",
          "summary": "Show Contact",
          "description": "Get a contact belonging to the account using ID",
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/extended_contact"
              }
            },
            "404": {
              "description": "Contact not found"
            },
            "403": {
              "description": "Access denied"
            }
          }
        },
        "put": {
          "tags": [
            "Contacts"
          ],
          "operationId": "contactUpdate",
          "summary": "Update Contact",
          "description": "Update a contact belonging to the account using ID",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/contact_update"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/contact_base"
              }
            },
            "404": {
              "description": "Contact not found"
            },
            "403": {
              "description": "Access denied"
            }
          }
        },
        "delete": {
          "tags": [
            "Contacts"
          ],
          "operationId": "contactDelete",
          "summary": "Delete Contact",
          "responses": {
            "200": {
              "description": "Success"
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Contact not found"
            }
          }
        }
      },
      "/api/v1/accounts/{account_id}/contacts/search": {
        "get": {
          "tags": [
            "Contacts"
          ],
          "operationId": "contactSearch",
          "description": "Search the resolved contacts using a search key, currently supports email search (Page size = 15). Resolved contacts are the ones with a value for identifier, email or phone number",
          "summary": "Search Contacts",
          "parameters": [
            {
              "$ref": "#/parameters/account_id"
            },
            {
              "name": "q",
              "in": "query",
              "type": "string",
              "description": "Search using contact `name`, `identifier`, `email` or `phone number`"
            },
            {
              "$ref": "#/parameters/contact_sort_param"
            },
            {
              "$ref": "#/parameters/page"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "type": "object",
                "properties": {
                  "payload": {
                    "$ref": "#/definitions/contact_list"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication error",
              "schema": {
                "$ref": "#/definitions/bad_request_error"
              }
            }
          }
        }
      },
      "/api/v1/accounts/{account_id}/contacts/filter": {
        "parameters": [
          {
            "$ref": "#/parameters/account_id"
          }
        ],
        "post": {
          "tags": [
            "Contacts"
          ],
          "operationId": "contactFilter",
          "description": "Filter contacts with custom filter options and pagination",
          "summary": "Contact Filter",
          "security": [
            {
              "userApiKey": []
            },
            {
              "agentBotApiKey": []
            }
          ],
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "type": "integer"
            },
            {
              "name": "body",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "payload": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "attribute_key": {
                          "type": "string",
                          "description": "filter attribute name"
                        },
                        "filter_operator": {
                          "type": "string",
                          "description": "filter operator name",
                          "enum": [
                            "equal_to",
                            "not_equal_to",
                            "contains",
                            "does_not_contain"
                          ]
                        },
                        "values": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "array of the attribute values to filter"
                        },
                        "query_operator": {
                          "type": "string",
                          "description": "query operator name",
                          "enum": [
                            "AND",
                            "OR"
                          ]
                        }
                      }
                    },
                    "example": [
                      {
                        "attribute_key": "name",
                        "filter_operator": "equal_to",
                        "values": [
                          "en"
                        ],
                        "query_operator": "AND"
                      },
                      {
                        "attribute_key": "country_code",
                        "filter_operator": "equal_to",
                        "values": [
                          "us"
                        ],
                        "query_operator": null
                      }
                    ]
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/contact_list"
              }
            },
            "400": {
              "description": "Bad Request Error",
              "schema": {
                "$ref": "#/definitions/bad_request_error"
              }
            }
          }
        }
      },
      "/api/v1/accounts/{account_id}/contacts/{contact_identifier}/labels": {
        "parameters": [
          {
            "$ref": "#/parameters/account_id"
          },
          {
            "$ref": "#/parameters/public_contact_identifier"
          }
        ],
        "get": {
          "tags": [
            "Contact Labels"
          ],
          "operationId": "list-all-labels-of-a-contact",
          "summary": "List Labels",
          "description": "Lists all the labels of a contact",
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/contact_labels"
              }
            },
            "404": {
              "description": "Contact not found"
            },
            "401": {
              "description": "Unauthorized"
            }
          }
        },
        "post": {
          "tags": [
            "Contact Labels"
          ],
          "operationId": "contact-add-labels",
          "summary": "Add Labels",
          "description": "Add labels to a contact. Note that this API would overwrite the existing list of labels associated to the conversation.",
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "labels": {
                    "type": "array",
                    "description": "Array of labels (comma-separated strings)",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/contact_labels"
              }
            },
            "404": {
              "description": "Contact not found"
            },
            "401": {
              "description": "Unauthorized"
            }
          }
        }
      },
      "/api/v1/accounts/{account_id}/conversations/meta": {
        "parameters": [
          {
            "$ref": "#/parameters/account_id"
          }
        ],
        "get": {
          "tags": [
            "Conversations"
          ],
          "operationId": "conversationListMeta",
          "description": "Get open, unassigned and all Conversation counts",
          "summary": "Get Conversation Counts",
          "parameters": [
            {
              "name": "status",
              "in": "query",
              "type": "string",
              "enum": [
                "all",
                "open",
                "resolved",
                "pending",
                "snoozed"
              ],
              "default": "open",
              "description": "Filter by conversation status."
            },
            {
              "name": "q",
              "in": "query",
              "type": "string",
              "description": "Filters conversations with messages containing the search term"
            },
            {
              "name": "inbox_id",
              "in": "query",
              "type": "integer"
            },
            {
              "name": "team_id",
              "in": "query",
              "type": "integer"
            },
            {
              "name": "labels",
              "in": "query",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "type": "object",
                "properties": {
                  "meta": {
                    "type": "object",
                    "properties": {
                      "mine_count": {
                        "type": "number"
                      },
                      "unassigned_count": {
                        "type": "number"
                      },
                      "assigned_count": {
                        "type": "number"
                      },
                      "all_count": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request Error",
              "schema": {
                "$ref": "#/definitions/bad_request_error"
              }
            }
          }
        }
      },
      "/api/v1/accounts/{account_id}/conversations": {
        "parameters": [
          {
            "$ref": "#/parameters/account_id"
          }
        ],
        "get": {
          "tags": [
            "Conversations"
          ],
          "operationId": "conversationList",
          "description": "List all the conversations with pagination",
          "summary": "Conversations List",
          "parameters": [
            {
              "name": "assignee_type",
              "in": "query",
              "type": "string",
              "enum": [
                "me",
                "unassigned",
                "all",
                "assigned"
              ],
              "default": "all",
              "description": "Filter conversations by assignee type."
            },
            {
              "name": "status",
              "in": "query",
              "type": "string",
              "enum": [
                "all",
                "open",
                "resolved",
                "pending",
                "snoozed"
              ],
              "default": "open",
              "description": "Filter by conversation status."
            },
            {
              "name": "q",
              "in": "query",
              "type": "string",
              "description": "Filters conversations with messages containing the search term"
            },
            {
              "name": "inbox_id",
              "in": "query",
              "type": "integer"
            },
            {
              "name": "team_id",
              "in": "query",
              "type": "integer"
            },
            {
              "name": "labels",
              "in": "query",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "name": "page",
              "in": "query",
              "type": "integer",
              "default": 1,
              "description": "paginate through conversations"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/conversation_list"
              }
            },
            "400": {
              "description": "Bad Request Error",
              "schema": {
                "$ref": "#/definitions/bad_request_error"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Conversations"
          ],
          "operationId": "newConversation",
          "summary": "Create New Conversation",
          "description": "Creating a conversation in flexichat requires a source id.",
          "security": [
            {
              "userApiKey": []
            },
            {
              "agentBotApiKey": []
            }
          ],
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "required": [
                  "source_id",
                  "inbox_id"
                ],
                "properties": {
                  "source_id": {
                    "type": "string",
                    "description": "Conversation source id"
                  },
                  "inbox_id": {
                    "type": "string",
                    "description": "Id of inbox in which the conversation is created <br/> Allowed Inbox Types: Website, Phone, Api, Email "
                  },
                  "contact_id": {
                    "type": "string",
                    "description": "Contact Id for which conversation is created"
                  },
                  "additional_attributes": {
                    "type": "object",
                    "description": "Lets you specify attributes like browser information"
                  },
                  "custom_attributes": {
                    "type": "object",
                    "description": "The object to save custom attributes for conversation, accepts custom attributes key and value",
                    "example": {
                      "attribute_key": "attribute_value",
                      "priority_conversation_number": 3
                    }
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "open",
                      "resolved",
                      "pending"
                    ],
                    "description": "Specify the conversation whether it's pending, open, closed"
                  },
                  "assignee_id": {
                    "type": "string",
                    "description": "Agent Id for assigning a conversation to an agent"
                  },
                  "team_id": {
                    "type": "string",
                    "description": "Team Id for assigning a conversation to a team"
                  },
                  "message": {
                    "type": "object",
                    "description": "The initial message to be sent to the conversation",
                    "required": [
                      "content"
                    ],
                    "properties": {
                      "content": {
                        "type": "string",
                        "description": "The content of the message"
                      },
                      "template_params": {
                        "type": "object",
                        "description": "The template params for the message in case of whatsapp Channel",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the template",
                            "example": "sample_issue_resolution"
                          },
                          "category": {
                            "type": "string",
                            "description": "Category of the template",
                            "example": "UTILITY"
                          },
                          "language": {
                            "type": "string",
                            "description": "Language of the template",
                            "example": "en_US"
                          },
                          "processed_params": {
                            "type": "object",
                            "description": "The processed param values for template variables in template",
                            "example": {
                              "1": "Flexichat"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "description": "ID of the conversation"
                  },
                  "account_id": {
                    "type": "number",
                    "description": "Account Id"
                  },
                  "inbox_id": {
                    "type": "number",
                    "description": "ID of the inbox"
                  }
                }
              }
            },
            "403": {
              "description": "Access denied"
            }
          }
        }
      },
      "/api/v1/accounts/{account_id}/conversations/filter": {
        "parameters": [
          {
            "$ref": "#/parameters/account_id"
          }
        ],
        "post": {
          "tags": [
            "Conversations"
          ],
          "operationId": "conversationFilter",
          "description": "Filter conversations with custom filter options and pagination",
          "summary": "Conversations Filter",
          "security": [
            {
              "userApiKey": []
            },
            {
              "agentBotApiKey": []
            }
          ],
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "type": "integer"
            },
            {
              "name": "body",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "payload": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "attribute_key": {
                          "type": "string",
                          "description": "filter attribute name"
                        },
                        "filter_operator": {
                          "type": "string",
                          "description": "filter operator name",
                          "enum": [
                            "equal_to",
                            "not_equal_to",
                            "contains",
                            "does_not_contain"
                          ]
                        },
                        "values": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "array of the attribute values to filter"
                        },
                        "query_operator": {
                          "type": "string",
                          "description": "query operator name",
                          "enum": [
                            "AND",
                            "OR"
                          ]
                        }
                      }
                    },
                    "example": [
                      {
                        "attribute_key": "browser_language",
                        "filter_operator": "not_eq",
                        "values": [
                          "en"
                        ],
                        "query_operator": "AND"
                      },
                      {
                        "attribute_key": "status",
                        "filter_operator": "eq",
                        "values": [
                          "pending"
                        ],
                        "query_operator": null
                      }
                    ]
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/conversation_list"
              }
            },
            "400": {
              "description": "Bad Request Error",
              "schema": {
                "$ref": "#/definitions/bad_request_error"
              }
            }
          }
        }
      },
      "/api/v1/accounts/{account_id}/conversations/{conversation_id}": {
        "parameters": [
          {
            "$ref": "#/parameters/account_id"
          },
          {
            "$ref": "#/parameters/conversation_id"
          }
        ],
        "get": {
          "tags": [
            "Conversations"
          ],
          "operationId": "get-details-of-a-conversation",
          "summary": "Conversation Details",
          "description": "Get all details regarding a conversation with all messages in the conversation",
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/conversation_show"
              }
            },
            "404": {
              "description": "Conversation not found"
            },
            "403": {
              "description": "Access denied"
            }
          }
        },
        "patch": {
          "tags": [
            "Conversations"
          ],
          "operationId": "update-conversation",
          "summary": "Update Conversation",
          "description": "Update Conversation Attributes",
          "security": [
            {
              "userApiKey": []
            },
            {
              "agentBotApiKey": []
            }
          ],
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "priority": {
                    "type": "string",
                    "enum": [
                      "urgent",
                      "high",
                      "medium",
                      "low",
                      "none"
                    ],
                    "description": "The priority of the conversation"
                  },
                  "sla_policy_id": {
                    "type": "number",
                    "description": "The ID of the SLA policy (Available only in Enterprise edition)"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success"
            },
            "404": {
              "description": "Conversation not found"
            },
            "401": {
              "description": "Unauthorized"
            }
          }
        }
      },
      "/api/v1/accounts/{account_id}/conversations/{conversation_id}/toggle_status": {
        "parameters": [
          {
            "$ref": "#/parameters/account_id"
          },
          {
            "$ref": "#/parameters/conversation_id"
          }
        ],
        "post": {
          "tags": [
            "Conversations"
          ],
          "operationId": "toggle-status-of-a-conversation",
          "summary": "Toggle Status",
          "description": "Toggles the status of the conversation between open and resolved",
          "security": [
            {
              "userApiKey": []
            },
            {
              "agentBotApiKey": []
            }
          ],
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "open",
                      "resolved",
                      "pending"
                    ],
                    "description": "The status of the conversation"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/conversation_status_toggle"
              }
            },
            "404": {
              "description": "Conversation not found"
            },
            "401": {
              "description": "Unauthorized"
            }
          }
        }
      },
      "/api/v1/accounts/{account_id}/conversations/{conversation_id}/assignments": {
        "parameters": [
          {
            "$ref": "#/parameters/account_id"
          },
          {
            "$ref": "#/parameters/conversation_id"
          }
        ],
        "post": {
          "tags": [
            "Conversation Assignment"
          ],
          "operationId": "assign-a-conversation",
          "summary": "Assign Conversation",
          "description": "Assign a conversation to an agent or a team",
          "security": [
            {
              "userApiKey": []
            },
            {
              "agentBotApiKey": []
            }
          ],
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "assignee_id": {
                    "type": "number",
                    "description": "Id of the assignee user"
                  },
                  "team_id": {
                    "type": "number",
                    "description": "Id of the team. If the assignee_id is present, this param would be ignored"
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/user"
              }
            },
            "404": {
              "description": "Conversation not found"
            },
            "401": {
              "description": "Unauthorized"
            }
          }
        }
      },
      "/api/v1/accounts/{account_id}/conversations/{conversation_id}/messages": {
        "parameters": [
          {
            "$ref": "#/parameters/account_id"
          },
          {
            "$ref": "#/parameters/conversation_id"
          }
        ],
        "get": {
          "tags": [
            "Messages"
          ],
          "operationId": "list-all-messages",
          "summary": "Get messages",
          "description": "List all messages of a conversation",
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "type": "array",
                "description": "Array of messages",
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/generic_id"
                    },
                    {
                      "$ref": "#/definitions/message"
                    }
                  ]
                }
              }
            },
            "404": {
              "description": "Conversation not found"
            },
            "401": {
              "description": "Unauthorized"
            }
          }
        },
        "post": {
          "tags": [
            "Messages"
          ],
          "operationId": "create-a-new-message-in-a-conversation",
          "summary": "Create New Message",
          "description": "Create a new message in the conversation",
          "security": [
            {
              "userApiKey": []
            },
            {
              "agentBotApiKey": []
            }
          ],
          "parameters": [
            {
              "name": "data",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/conversation_message_create"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/generic_id"
                  },
                  {
                    "$ref": "#/definitions/message"
                  }
                ]
              }
            },
            "404": {
              "description": "Conversation not found"
            },
            "403": {
              "description": "Access denied"
            }
          }
        }